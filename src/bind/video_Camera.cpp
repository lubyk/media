/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Camera
 *
 * This file has been generated by dub 2.2.0.
 */
#include "dub/dub.h"
#include "video/Camera.h"

using namespace video;

/** Cast (class_name)
 * 
 */
static int Camera__cast_(lua_State *L) {

  Camera *self = *((Camera **)dub::checksdata_n(L, 1, "video.Camera"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub::hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "video.Buffer")) break;
      *retval__ = static_cast<Buffer *>(self);
      return 1;
    }
  }
  return 0;
}

/** video::Camera::Camera(const char *device_uid=NULL)
 * include/video/Camera.h:46
 */
static int Camera_Camera(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      const char *device_uid = dub::checkstring(L, 1);
      Camera *retval__ = new Camera(device_uid);
      retval__->dub_pushobject(L, retval__, "video.Camera", true);
      return 1;
    } else {
      Camera *retval__ = new Camera();
      retval__->dub_pushobject(L, retval__, "video.Camera", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** virtual video::Camera::~Camera()
 * include/video/Camera.h:48
 */
static int Camera__Camera(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "video.Camera"));
    if (userdata->gc) {
      Camera *self = (Camera *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** void video::Camera::start()
 * include/video/Camera.h:52
 */
static int Camera_start(lua_State *L) {
  try {
    Camera *self = *((Camera **)dub::checksdata(L, 1, "video.Camera"));
    self->start();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "start: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "start: Unknown exception");
  }
  return dub::error(L);
}

/** void video::Camera::stop()
 * include/video/Camera.h:56
 */
static int Camera_stop(lua_State *L) {
  try {
    Camera *self = *((Camera **)dub::checksdata(L, 1, "video.Camera"));
    self->stop();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "stop: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "stop: Unknown exception");
  }
  return dub::error(L);
}

/** LuaStackSize video::Camera::__tostring(lua_State *L)
 * include/video/Camera.h:65
 */
static int Camera___tostring(lua_State *L) {
  try {
    Camera *self = *((Camera **)dub::checksdata(L, 1, "video.Camera"));
    return self->__tostring(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "__tostring: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__tostring: Unknown exception");
  }
  return dub::error(L);
}

/** static LuaStackSize video::Camera::sources(lua_State *L)
 * include/video/Camera.h:61
 */
static int Camera_sources(lua_State *L) {
  try {
    return Camera::sources(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "sources: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "sources: Unknown exception");
  }
  return dub::error(L);
}

/** LuaStackSize video::Buffer::frameData(lua_State *L)
 * include/video/Buffer.h:66
 */
static int Camera_frameData(lua_State *L) {
  try {
    Camera *self = *((Camera **)dub::checksdata(L, 1, "video.Camera"));
    return self->frameData(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "frameData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "frameData: Unknown exception");
  }
  return dub::error(L);
}

/** size_t video::Buffer::frameSize()
 * include/video/Buffer.h:74
 */
static int Camera_frameSize(lua_State *L) {
  try {
    Camera *self = *((Camera **)dub::checksdata(L, 1, "video.Camera"));
    lua_pushnumber(L, self->frameSize());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "frameSize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "frameSize: Unknown exception");
  }
  return dub::error(L);
}

/** LuaStackSize video::Buffer::frameInfo(lua_State *L)
 * include/video/Buffer.h:78
 */
static int Camera_frameInfo(lua_State *L) {
  try {
    Camera *self = *((Camera **)dub::checksdata(L, 1, "video.Camera"));
    return self->frameInfo(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "frameInfo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "frameInfo: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== METHODS

static const struct luaL_Reg Camera_member_methods[] = {
  { "_cast_"       , Camera__cast_        },
  { "new"          , Camera_Camera        },
  { "__gc"         , Camera__Camera       },
  { "start"        , Camera_start         },
  { "stop"         , Camera_stop          },
  { "__tostring"   , Camera___tostring    },
  { "sources"      , Camera_sources       },
  { "frameData"    , Camera_frameData     },
  { "frameSize"    , Camera_frameSize     },
  { "frameInfo"    , Camera_frameInfo     },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_video_Camera(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "video.Camera");
  // <mt>

  // register member methods
  dub::fregister(L, Camera_member_methods);
  // setup meta-table
  dub::setup(L, "video.Camera");
  // <mt>
  return 1;
}
