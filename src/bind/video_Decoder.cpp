/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Decoder
 *
 * This file has been generated by dub 2.2.0.
 */
#include "dub/dub.h"
#include "video/Decoder.h"

using namespace video;

/** Cast (class_name)
 * 
 */
static int Decoder__cast_(lua_State *L) {

  Decoder *self = *((Decoder **)dub::checksdata_n(L, 1, "video.Decoder"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub::hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "video.Buffer")) break;
      *retval__ = static_cast<Buffer *>(self);
      return 1;
    }
  }
  return 0;
}

/** video::Decoder::Decoder(const char *asset_url)
 * include/video/Decoder.h:46
 */
static int Decoder_Decoder(lua_State *L) {
  try {
    const char *asset_url = dub::checkstring(L, 1);
    Decoder *retval__ = new Decoder(asset_url);
    retval__->dub_pushobject(L, retval__, "video.Decoder", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** virtual video::Decoder::~Decoder()
 * include/video/Decoder.h:48
 */
static int Decoder__Decoder(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "video.Decoder"));
    if (userdata->gc) {
      Decoder *self = (Decoder *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** bool video::Decoder::nextFrame()
 * include/video/Decoder.h:55
 */
static int Decoder_nextFrame(lua_State *L) {
  try {
    Decoder *self = *((Decoder **)dub::checksdata(L, 1, "video.Decoder"));
    lua_pushboolean(L, self->nextFrame());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "nextFrame: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "nextFrame: Unknown exception");
  }
  return dub::error(L);
}

/** LuaStackSize video::Decoder::__tostring(lua_State *L)
 * include/video/Decoder.h:59
 */
static int Decoder___tostring(lua_State *L) {
  try {
    Decoder *self = *((Decoder **)dub::checksdata(L, 1, "video.Decoder"));
    return self->__tostring(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "__tostring: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__tostring: Unknown exception");
  }
  return dub::error(L);
}

/** LuaStackSize video::Buffer::frameData(lua_State *L)
 * include/video/Buffer.h:66
 */
static int Decoder_frameData(lua_State *L) {
  try {
    Decoder *self = *((Decoder **)dub::checksdata(L, 1, "video.Decoder"));
    return self->frameData(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "frameData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "frameData: Unknown exception");
  }
  return dub::error(L);
}

/** size_t video::Buffer::frameSize()
 * include/video/Buffer.h:74
 */
static int Decoder_frameSize(lua_State *L) {
  try {
    Decoder *self = *((Decoder **)dub::checksdata(L, 1, "video.Decoder"));
    lua_pushnumber(L, self->frameSize());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "frameSize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "frameSize: Unknown exception");
  }
  return dub::error(L);
}

/** LuaStackSize video::Buffer::frameInfo(lua_State *L)
 * include/video/Buffer.h:78
 */
static int Decoder_frameInfo(lua_State *L) {
  try {
    Decoder *self = *((Decoder **)dub::checksdata(L, 1, "video.Decoder"));
    return self->frameInfo(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "frameInfo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "frameInfo: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== METHODS

static const struct luaL_Reg Decoder_member_methods[] = {
  { "_cast_"       , Decoder__cast_       },
  { "new"          , Decoder_Decoder      },
  { "__gc"         , Decoder__Decoder     },
  { "nextFrame"    , Decoder_nextFrame    },
  { "__tostring"   , Decoder___tostring   },
  { "frameData"    , Decoder_frameData    },
  { "frameSize"    , Decoder_frameSize    },
  { "frameInfo"    , Decoder_frameInfo    },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_video_Decoder(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "video.Decoder");
  // <mt>

  // register member methods
  dub::fregister(L, Decoder_member_methods);
  // setup meta-table
  dub::setup(L, "video.Decoder");
  // <mt>
  return 1;
}
