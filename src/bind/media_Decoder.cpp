/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Decoder
 *
 * This file has been generated by dub 2.2.1.
 */
#include "dub/dub.h"
#include "media/Decoder.h"

using namespace media;

/** Cast (class_name)
 * 
 */
static int Decoder__cast_(lua_State *L) {

  Decoder *self = *((Decoder **)dub::checksdata_n(L, 1, "media.Decoder"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub::hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "media.Buffer")) break;
      *retval__ = static_cast<Buffer *>(self);
      return 1;
    }
  }
  return 0;
}

/** media::Decoder::Decoder(bool is_image)
 * include/media/Decoder.h:46
 */
static int Decoder_Decoder(lua_State *L) {
  try {
    bool is_image = dub::checkboolean(L, 1);
    Decoder *retval__ = new Decoder(is_image);
    retval__->dub_pushobject(L, retval__, "media.Decoder", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** virtual media::Decoder::~Decoder()
 * include/media/Decoder.h:48
 */
static int Decoder__Decoder(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "media.Decoder"));
    if (userdata->gc) {
      Decoder *self = (Decoder *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** void media::Decoder::start()
 * include/media/Decoder.h:53
 */
static int Decoder_start(lua_State *L) {
  try {
    Decoder *self = *((Decoder **)dub::checksdata(L, 1, "media.Decoder"));
    self->start();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "start: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "start: Unknown exception");
  }
  return dub::error(L);
}

/** void media::Decoder::stop()
 * include/media/Decoder.h:57
 */
static int Decoder_stop(lua_State *L) {
  try {
    Decoder *self = *((Decoder **)dub::checksdata(L, 1, "media.Decoder"));
    self->stop();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "stop: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "stop: Unknown exception");
  }
  return dub::error(L);
}

/** bool media::Decoder::nextFrame(bool blocking=false)
 * include/media/Decoder.h:64
 */
static int Decoder_nextFrame(lua_State *L) {
  try {
    Decoder *self = *((Decoder **)dub::checksdata(L, 1, "media.Decoder"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      bool blocking = dub::checkboolean(L, 2);
      lua_pushboolean(L, self->nextFrame(blocking));
      return 1;
    } else {
      lua_pushboolean(L, self->nextFrame());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "nextFrame: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "nextFrame: Unknown exception");
  }
  return dub::error(L);
}

/** void media::Decoder::loadAsset(const char *url)
 * include/media/Decoder.h:69
 */
static int Decoder_loadAsset(lua_State *L) {
  try {
    Decoder *self = *((Decoder **)dub::checksdata(L, 1, "media.Decoder"));
    const char *url = dub::checkstring(L, 2);
    self->loadAsset(url);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "loadAsset: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "loadAsset: Unknown exception");
  }
  return dub::error(L);
}

/** bool media::Decoder::isImage()
 * include/media/Decoder.h:71
 */
static int Decoder_isImage(lua_State *L) {
  try {
    Decoder *self = *((Decoder **)dub::checksdata(L, 1, "media.Decoder"));
    lua_pushboolean(L, self->isImage());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isImage: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isImage: Unknown exception");
  }
  return dub::error(L);
}

/** LuaStackSize media::Decoder::__tostring(lua_State *L)
 * include/media/Decoder.h:75
 */
static int Decoder___tostring(lua_State *L) {
  try {
    Decoder *self = *((Decoder **)dub::checksdata(L, 1, "media.Decoder"));
    return self->__tostring(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "__tostring: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__tostring: Unknown exception");
  }
  return dub::error(L);
}

/** LuaStackSize media::Buffer::frameData(lua_State *L)
 * include/media/Buffer.h:68
 */
static int Decoder_frameData(lua_State *L) {
  try {
    Decoder *self = *((Decoder **)dub::checksdata(L, 1, "media.Decoder"));
    return self->frameData(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "frameData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "frameData: Unknown exception");
  }
  return dub::error(L);
}

/** size_t media::Buffer::frameSize()
 * include/media/Buffer.h:76
 */
static int Decoder_frameSize(lua_State *L) {
  try {
    Decoder *self = *((Decoder **)dub::checksdata(L, 1, "media.Decoder"));
    lua_pushnumber(L, self->frameSize());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "frameSize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "frameSize: Unknown exception");
  }
  return dub::error(L);
}

/** LuaStackSize media::Buffer::frameInfo(lua_State *L)
 * include/media/Buffer.h:80
 */
static int Decoder_frameInfo(lua_State *L) {
  try {
    Decoder *self = *((Decoder **)dub::checksdata(L, 1, "media.Decoder"));
    return self->frameInfo(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "frameInfo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "frameInfo: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== METHODS

static const struct luaL_Reg Decoder_member_methods[] = {
  { "_cast_"       , Decoder__cast_       },
  { "new"          , Decoder_Decoder      },
  { "__gc"         , Decoder__Decoder     },
  { "start"        , Decoder_start        },
  { "stop"         , Decoder_stop         },
  { "nextFrame"    , Decoder_nextFrame    },
  { "loadAsset"    , Decoder_loadAsset    },
  { "isImage"      , Decoder_isImage      },
  { "__tostring"   , Decoder___tostring   },
  { "frameData"    , Decoder_frameData    },
  { "frameSize"    , Decoder_frameSize    },
  { "frameInfo"    , Decoder_frameInfo    },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_media_Decoder(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "media.Decoder");
  // <mt>

  // register member methods
  dub::fregister(L, Decoder_member_methods);
  // setup meta-table
  dub::setup(L, "media.Decoder");
  // <mt>
  return 1;
}
