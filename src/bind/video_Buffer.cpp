/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Buffer
 *
 * This file has been generated by dub 2.2.0.
 */
#include "dub/dub.h"
#include "video/Buffer.h"

using namespace video;

/** video::Buffer::Buffer()
 * include/video/Buffer.h:51
 */
static int Buffer_Buffer(lua_State *L) {
  try {
    Buffer *retval__ = new Buffer();
    dub::pushudata(L, retval__, "video.Buffer", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** virtual video::Buffer::~Buffer()
 * include/video/Buffer.h:60
 */
static int Buffer__Buffer(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "video.Buffer"));
    if (userdata->gc) {
      Buffer *self = (Buffer *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** LuaStackSize video::Buffer::frameData(lua_State *L)
 * include/video/Buffer.h:66
 */
static int Buffer_frameData(lua_State *L) {
  try {
    Buffer *self = *((Buffer **)dub::checksdata(L, 1, "video.Buffer"));
    return self->frameData(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "frameData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "frameData: Unknown exception");
  }
  return dub::error(L);
}

/** size_t video::Buffer::frameSize()
 * include/video/Buffer.h:74
 */
static int Buffer_frameSize(lua_State *L) {
  try {
    Buffer *self = *((Buffer **)dub::checksdata(L, 1, "video.Buffer"));
    lua_pushnumber(L, self->frameSize());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "frameSize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "frameSize: Unknown exception");
  }
  return dub::error(L);
}

/** LuaStackSize video::Buffer::frameInfo(lua_State *L)
 * include/video/Buffer.h:78
 */
static int Buffer_frameInfo(lua_State *L) {
  try {
    Buffer *self = *((Buffer **)dub::checksdata(L, 1, "video.Buffer"));
    return self->frameInfo(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "frameInfo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "frameInfo: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int Buffer___tostring(lua_State *L) {
  Buffer *self = *((Buffer **)dub::checksdata_n(L, 1, "video.Buffer"));
  lua_pushfstring(L, "video.Buffer: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg Buffer_member_methods[] = {
  { "new"          , Buffer_Buffer        },
  { "__gc"         , Buffer__Buffer       },
  { "frameData"    , Buffer_frameData     },
  { "frameSize"    , Buffer_frameSize     },
  { "frameInfo"    , Buffer_frameInfo     },
  { "__tostring"   , Buffer___tostring    },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_video_Buffer(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "video.Buffer");
  // <mt>

  // register member methods
  dub::fregister(L, Buffer_member_methods);
  // setup meta-table
  dub::setup(L, "video.Buffer");
  // <mt>
  return 1;
}
